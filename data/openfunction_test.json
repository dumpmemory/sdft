[
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a coffee shop near me with free Wi-Fi in San Francisco.\n\nFunction to be used: coffee_shop.find_nearby\nDescription: Locate nearby coffee shops based on specific criteria like Wi-Fi availability.\nParameters:\n1. location (type: string) - The city and state, e.g. San Francisco, CA\n2. amenities (type: array) - Preferred amenities.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "coffee_shop.find_nearby(location=\"San Francisco\", amenities=\"Wi-Fi\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Book a flight from Los Angeles to New York for two people on June 15th.\n\nFunction to be used: flight.book\nDescription: Book a flight for a specified number of passengers and travel date.\nParameters:\n1. origin (type: string) - Departure city or airport.\n2. destination (type: string) - Arrival city or airport.\n3. passengers (type: integer) - Number of passengers.\n4. date (type: string) - Preferred travel date (e.g., YYYY-MM-DD).\nRequired: [origin, destination, passengers]\n\nFormat your response as a single string using keyword arguments.",
        "output": "flight.book(origin=\"Los Angeles\", destination=\"New York\", passengers=2, date=\"June 15th\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Book a table for two at an Italian restaurant in Manhattan, New York for tonight at 7 PM.\n\nFunction to be used: restaurant.book_table\nDescription: Reserve a table at a specific restaurant for a given date and time.\nParameters:\n1. restaurant (type: string) - Name of the restaurant.\n2. location (type: string) - Location for the reservation.\n3. party_size (type: integer) - Number of people in the party.\n4. reservation_time (type: string) - Date and time of the reservation (ISO 8601 format).\nRequired: [restaurant, location, party_size, reservation_time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "restaurant.book_table(restaurant=\"Italiano's\", location=\"Manhattan, New York\", party_size=2, reservation_time=\"2023-10-23 19:00\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get weather information for Paris, France for the next 5 days.\n\nFunction to be used: weather.forecast\nDescription: Retrieve a weather forecast for a specific location and time frame.\nParameters:\n1. location (type: string) - City or location for the forecast.\n2. days (type: integer) - Number of days for the forecast.\nRequired: [location, days]\n\nFormat your response as a single string using keyword arguments.",
        "output": "weather.forecast(location=\"Paris, France\", days=5)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a 24/7 pharmacy near San Diego, California with a drive-thru option.\n\nFunction to be used: pharmacy.find_nearby\nDescription: Locate nearby pharmacies with specific features as parameters.\nParameters:\n1. location (type: string) - Current location for the search.\n2. feature (type: string) - Desired features of the pharmacy.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "pharmacy.find_nearby(location=\"San Diego, California\", feature=\"Drive-thru\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Order me six pack of potato chips and eight pack of chocolate from target near Berkeley.\n\nFunction to be used: target.order\nDescription: Order items from target given the item and quantity\nParameters:\n1. loc (type: string) - Location of the nearest Target.\n2. item (type: array)\n3. quantity (type: array)\nRequired: [loc, item, quantity]\n\nFormat your response as a single string using keyword arguments.",
        "output": "target.order(loc=Berkeley,item=[\"potato\", \"chocolate\"], quantity=[6,8])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find me a list of Berkeley Computer Science classes that are undergraduate levels that still have an open seat.\n\nFunction to be used: classes.find\nDescription: Find a list of classes at given school, given discipline, levels, and status\nParameters:\n1. school (type: string) - Refine which school the query is searching.\n2. discipline (type: string) - The discipline of the courses one is looking for.\n3. level (type: string) - The level of the courses.\n4. status (type: string) - The status of classes one wants to look for.\nRequired: [school, discipline, level, status]\n\nFormat your response as a single string using keyword arguments.",
        "output": "classes.find(school='Berkeley', discipline='computer science', level='undergraduate', status='open')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the nearest gas station to my current location.\n\nFunction to be used: gas_station.find_nearby\nDescription: Locate nearby gas stations based on current location.\nParameters:\n1. location (type: string) - Current location for the search.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "gas_station.find_nearby(location=\"current\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the top-rated restaurants in San Francisco with outdoor seating.\n\nFunction to be used: restaurant.find_top_rated\nDescription: Find top-rated restaurants based on location and specific criteria.\nParameters:\n1. location (type: string) - The city, e.g. San Francisco\n2. amenities (type: array) - Preferred amenities.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "restaurant.find_top_rated(location=\"San Francisco\", amenities=[\"Outdoor Seating\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the current time in New York.\n\nFunction to be used: timezone.get_current_time\nDescription: Retrieve the current time in a specific timezone.\nParameters:\n1. timezone (type: string) - The timezone, e.g. America/New_York\nRequired: [timezone]\n\nFormat your response as a single string using keyword arguments.",
        "output": "timezone.get_current_time(timezone=\"America/New_York\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the lyrics of the song 'Shape of You' by Ed Sheeran.\n\nFunction to be used: lyrics.find\nDescription: Retrieve the lyrics of a specific song.\nParameters:\n1. song (type: string) - The name of the song.\n2. artist (type: string) - The name of the artist.\nRequired: [song, artist]\n\nFormat your response as a single string using keyword arguments.",
        "output": "lyrics.find(song=\"Shape of You\", artist=\"Ed Sheeran\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the latest news headlines from CNN.\n\nFunction to be used: news.get_headlines\nDescription: Retrieve the latest news headlines from a specific news source.\nParameters:\n1. source (type: string) - The news source, e.g. CNN\nRequired: [source]\n\nFormat your response as a single string using keyword arguments.",
        "output": "news.get_headlines(source=\"CNN\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the definition of the word 'serendipity'.\n\nFunction to be used: dictionary.get_definition\nDescription: Retrieve the definition of a specific word.\nParameters:\n1. word (type: string) - The word to get the definition for.\nRequired: [word]\n\nFormat your response as a single string using keyword arguments.",
        "output": "dictionary.get_definition(word=\"serendipity\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Convert 10 miles to kilometers.\n\nFunction to be used: unit_conversion.convert\nDescription: Convert a value from one unit to another.\nParameters:\n1. value (type: number) - The value to be converted.\n2. from_unit (type: string) - The unit to convert from.\n3. to_unit (type: string) - The unit to convert to.\nRequired: [value, from_unit, to_unit]\n\nFormat your response as a single string using keyword arguments.",
        "output": "unit_conversion.convert(value=10, from_unit=\"miles\", to_unit=\"kilometers\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the current exchange rate between US dollars and Euros.\n\nFunction to be used: currency_conversion.get_exchange_rate\nDescription: Retrieve the current exchange rate between two currencies.\nParameters:\n1. base_currency (type: string) - The base currency.\n2. target_currency (type: string) - The target currency.\nRequired: [base_currency, target_currency]\n\nFormat your response as a single string using keyword arguments.",
        "output": "currency_conversion.get_exchange_rate(base_currency=\"USD\", target_currency=\"EUR\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for a movie with the title 'The Shawshank Redemption'.\n\nFunction to be used: movie.search\nDescription: Search for a movie by its title.\nParameters:\n1. title (type: string) - The title of the movie.\nRequired: [title]\n\nFormat your response as a single string using keyword arguments.",
        "output": "movie.search(title=\"The Shawshank Redemption\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the current stock price of Apple Inc.\n\nFunction to be used: stock.get_price\nDescription: Retrieve the current stock price of a specific company.\nParameters:\n1. company (type: string) - The name of the company.\nRequired: [company]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.get_price(company=\"Apple Inc.\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a park with a playground and picnic area near me in Chicago, Illinois.\n\nFunction to be used: park.find_nearby\nDescription: Locate nearby parks with specific features like playgrounds and picnic areas.\nParameters:\n1. location (type: string) - The city and state, e.g., Chicago, IL\n2. features (type: array) - Preferred park features.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "park.find_nearby(location=\"Chicago, Illinois\", features=[\"Playground\", \"Picnic Area\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Translate 'Hello, world!' into Spanish.\n\nFunction to be used: translation.translate\nDescription: Translate text from one language to another.\nParameters:\n1. text (type: string) - The text to be translated.\n2. target_language (type: string) - The target language for translation.\nRequired: [text, target_language]\n\nFormat your response as a single string using keyword arguments.",
        "output": "translation.translate(text=\"Hello, world!\", target_language=\"Spanish\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a dog-friendly hiking trail in Los Angeles, California.\n\nFunction to be used: trail.find_nearby\nDescription: Locate nearby hiking trails with specific features like dog-friendliness.\nParameters:\n1. location (type: string) - The city and state, e.g., Los Angeles, CA\n2. features (type: array) - Preferred trail features.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "trail.find_nearby(location=\"Los Angeles, California\", features=[\"Dog-Friendly\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a nearby hardware store in San Jose, California that's open on Sundays.\n\nFunction to be used: store.find_nearby\nDescription: Locate nearby hardware stores with specific criteria, such as open status.\nParameters:\n1. location (type: string) - The city and state, e.g., San Jose, CA\n2. open_on_sundays (type: boolean) - Whether the store should be open on Sundays.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "store.find_nearby(location=\"San Jose, California\", open_on_sundays=true)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find me a vegan restaurant in Austin, Texas that's open for dinner on weekdays.\n\nFunction to be used: restaurant.find_nearby\nDescription: Find a suitable restaurant given the location, type of cuisine, and open status as parameters.\nParameters:\n1. location (type: string) - The city and state, e.g., Austin, TX\n2. cuisine (type: string)\n3. open_for_dinner (type: boolean) - Whether the restaurant should be open for dinner on weekdays.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "restaurant.find_nearby(location=\"Austin, Texas\", cuisine=\"Vegan\", open_for_dinner=true)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Set a timer for 20 minutes to remind me to check the oven.\n\nFunction to be used: timer.set\nDescription: Set a timer for a specific duration with a reminder message.\nParameters:\n1. duration (type: integer) - Duration of the timer in minutes.\n2. message (type: string) - Reminder message.\nRequired: [duration, message]\n\nFormat your response as a single string using keyword arguments.",
        "output": "timer.set(duration=20, message=\"Check the oven\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for available parking spots near the Golden Gate Bridge in San Francisco.\n\nFunction to be used: parking.find_nearby\nDescription: Find available parking spots in the vicinity of a specific location.\nParameters:\n1. location (type: string) - The area or landmark, e.g., Golden Gate Bridge, San Francisco\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "parking.find_nearby(location=\"Golden Gate Bridge, San Francisco\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Recommend a good book to read based on my interest in science fiction.\n\nFunction to be used: book.recommend\nDescription: Get a book recommendation based on the user's interests or preferences.\nParameters:\n1. interest (type: string) - User's interest or preferred  , e.g., 'Science Fiction'\nRequired: [interest]\n\nFormat your response as a single string using keyword arguments.",
        "output": "book.recommend(interest=\"Science Fiction\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the current exchange rate between USD and EUR.\n\nFunction to be used: exchange_rate.get\nDescription: Retrieve the current exchange rate between two currencies.\nParameters:\n1. base_currency (type: string) - The base currency for conversion.\n2. target_currency (type: string) - The target currency for conversion.\nRequired: [base_currency, target_currency]\n\nFormat your response as a single string using keyword arguments.",
        "output": "exchange_rate.get(base_currency=\"USD\", target_currency=\"EUR\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for available rental cars in Los Angeles for a specific date range.\n\nFunction to be used: car_rental.search\nDescription: Search for available rental cars based on location and date range.\nParameters:\n1. location (type: string) - The city or location for the car rental search.\n2. start_date (type: string) - The start date of the rental period.\n3. end_date (type: string) - The end date of the rental period.\nRequired: [location, start_date, end_date]\n\nFormat your response as a single string using keyword arguments.",
        "output": "car_rental.search(location=\"Los Angeles\", start_date=\"2023-09-01\", end_date=\"2023-09-10\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the current time in Tokyo, Japan.\n\nFunction to be used: timezone.convert\nDescription: Convert the current time between different time zones.\nParameters:\n1. location (type: string) - The city or location for the time conversion.\n2. timezone (type: string) - The target timezone for the conversion.\nRequired: [location, timezone]\n\nFormat your response as a single string using keyword arguments.",
        "output": "timezone.convert(location=\"Tokyo, Japan\", timezone=\"Asia/Tokyo\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the latest news articles related to technology.\n\nFunction to be used: news.search\nDescription: Search for news articles based on specific topics or categories.\nParameters:\n1. topic (type: string) - The specific topic or category for the news search.\nRequired: [topic]\n\nFormat your response as a single string using keyword arguments.",
        "output": "news.search(topic=\"technology\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the nearest ATM to my current location that supports cash deposits.\n\nFunction to be used: atm.find_nearby\nDescription: Locate the nearest ATM based on the current location and specific features.\nParameters:\n1. location (type: string) - Current location for the search.\n2. feature (type: string) - Desired features of the ATM.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "atm.find_nearby(location=\"current_location\", feature=\"Cash Deposits\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the top-rated hiking trails near San Francisco.\n\nFunction to be used: hiking_trail.search\nDescription: Search for top-rated hiking trails based on location.\nParameters:\n1. location (type: string) - The city or location for the hiking trail search.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "hiking_trail.search(location=\"San Francisco\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the current exchange rate between USD and EUR.\n\nFunction to be used: exchange_rate.get\nDescription: Retrieve the current exchange rate between two currencies.\nParameters:\n1. base_currency (type: string) - The base currency for conversion.\n2. target_currency (type: string) - The target currency for conversion.\nRequired: [base_currency, target_currency]\n\nFormat your response as a single string using keyword arguments.",
        "output": "exchange_rate.get(base_currency=\"USD\", target_currency=\"EUR\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for a hotel in Miami, Florida with a pool and gym facilities.\n\nFunction to be used: hotel.search\nDescription: Search for hotels based on specific criteria like amenities.\nParameters:\n1. location (type: string) - The city and state, e.g. Miami, FL\n2. amenities (type: array) - Preferred amenities.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "hotel.search(location=\"Miami, Florida\", amenities=[\"Pool\", \"Gym\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the current time in Tokyo, Japan.\n\nFunction to be used: timezone.convert\nDescription: Convert the current time from one timezone to another.\nParameters:\n1. location (type: string) - The city and country, e.g. Tokyo, Japan\n2. target_timezone (type: string) - The target timezone for conversion.\nRequired: [location, target_timezone]\n\nFormat your response as a single string using keyword arguments.",
        "output": "timezone.convert(location=\"Tokyo, Japan\", target_timezone=\"Asia/Tokyo\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the latest news headlines from CNN.\n\nFunction to be used: news.get_headlines\nDescription: Retrieve the latest news headlines from a specific news source.\nParameters:\n1. news_source (type: string) - The news source, e.g. CNN\n2. category (type: string) - The category of news, e.g. politics, sports\nRequired: [news_source]\n\nFormat your response as a single string using keyword arguments.",
        "output": "news.get_headlines(news_source=\"CNN\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for a recipe for spaghetti carbonara.\n\nFunction to be used: recipe.search\nDescription: Search for recipes based on specific keywords or ingredients.\nParameters:\n1. keywords (type: string) - Keywords related to the recipe.\n2. dietary_restrictions (type: array) - Dietary restrictions for the recipe.\nFormat your response as a single string using keyword arguments.",
        "output": "recipe.search(keywords=\"spaghetti carbonara\", dietary_restrictions=[\"Vegetarian\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for a movie theater in Los Angeles that is showing the latest blockbuster movie.\n\nFunction to be used: movie_theater.search\nDescription: Search for movie theaters based on location and movie availability.\nParameters:\n1. location (type: string) - The city or area, e.g. Los Angeles\n2. movie_title (type: string) - The title of the movie.\nRequired: [location, movie_title]\n\nFormat your response as a single string using keyword arguments.",
        "output": "movie_theater.search(location=\"Los Angeles\", movie_title=\"Avengers: Endgame\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the compound interest for a principal amount of $5000, an interest rate of 5%, and a time period of 3 years.\n\nFunction to be used: finance.calculate_compound_interest\nDescription: Calculate the compound interest for a given principal amount, interest rate, and time period.\nParameters:\n1. principal (type: number) - The principal amount.\n2. interest_rate (type: number) - The interest rate.\n3. time_period (type: integer) - The time period in years.\nRequired: [principal, interest_rate, time_period]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_compound_interest(principal=5000, interest_rate=0.05, time_period=3)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Determine the monthly mortgage payment for a loan amount of $200,000, an interest rate of 4%, and a loan term of 30 years.\n\nFunction to be used: finance.calculate_mortgage_payment\nDescription: Calculate the monthly mortgage payment for a given loan amount, interest rate, and loan term.\nParameters:\n1. loan_amount (type: number) - The loan amount.\n2. interest_rate (type: number) - The interest rate.\n3. loan_term (type: integer) - The loan term in years.\nRequired: [loan_amount, interest_rate, loan_term]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_mortgage_payment(loan_amount=200000, interest_rate=0.04, loan_term=30)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the return on investment (ROI) for an investment of $10,000 with a profit of $2,500.\n\nFunction to be used: finance.calculate_roi\nDescription: Calculate the return on investment (ROI) for a given investment amount and profit.\nParameters:\n1. investment_amount (type: number) - The investment amount.\n2. profit (type: number) - The profit amount.\nRequired: [investment_amount, profit]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_roi(investment_amount=10000, profit=2500)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the present value of a future cash flow of $5000 with a discount rate of 8% and a time period of 5 years.\n\nFunction to be used: finance.calculate_present_value\nDescription: Calculate the present value of a future cash flow based on a discount rate and time period.\nParameters:\n1. future_cash_flow (type: number) - The future cash flow amount.\n2. discount_rate (type: number) - The discount rate.\n3. time_period (type: integer) - The time period in years.\nRequired: [future_cash_flow, discount_rate, time_period]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_present_value(future_cash_flow=5000, discount_rate=0.08, time_period=5)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the monthly car loan payment for a loan amount of $20,000, an interest rate of 6%, and a loan term of 5 years.\n\nFunction to be used: finance.calculate_car_loan_payment\nDescription: Calculate the monthly car loan payment for a given loan amount, interest rate, and loan term.\nParameters:\n1. loan_amount (type: number) - The loan amount.\n2. interest_rate (type: number) - The interest rate.\n3. loan_term (type: integer) - The loan term in years.\nRequired: [loan_amount, interest_rate, loan_term]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_car_loan_payment(loan_amount=20000, interest_rate=0.06, loan_term=5)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the future value of an investment of $5000 with an annual interest rate of 3% and a time period of 10 years.\n\nFunction to be used: finance.calculate_future_value\nDescription: Calculate the future value of an investment based on an annual interest rate and time period.\nParameters:\n1. investment_amount (type: number) - The investment amount.\n2. interest_rate (type: number) - The annual interest rate.\n3. time_period (type: integer) - The time period in years.\nRequired: [investment_amount, interest_rate, time_period]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_future_value(investment_amount=5000, interest_rate=0.03, time_period=10)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the minimum monthly payment for a credit card balance of $5000 with an annual interest rate of 18%.\n\nFunction to be used: finance.calculate_minimum_payment\nDescription: Calculate the minimum monthly payment for a credit card balance based on the balance amount and annual interest rate.\nParameters:\n1. balance (type: number) - The credit card balance.\n2. interest_rate (type: number) - The annual interest rate.\nRequired: [balance, interest_rate]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_minimum_payment(balance=5000, interest_rate=0.18)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the return on equity (ROE) for a company with a net income of $1,000,000 and shareholder's equity of $10,000,000.\n\nFunction to be used: finance.calculate_roe\nDescription: Calculate the return on equity (ROE) for a company based on net income and shareholder's equity.\nParameters:\n1. net_income (type: number) - The net income of the company.\n2. shareholders_equity (type: number) - The shareholder's equity of the company.\nRequired: [net_income, shareholders_equity]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_roe(net_income=1000000, shareholders_equity=10000000)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the monthly payment for a personal loan of $10,000 with an interest rate of 8% and a loan term of 2 years.\n\nFunction to be used: finance.calculate_personal_loan_payment\nDescription: Calculate the monthly payment for a personal loan based on the loan amount, interest rate, and loan term.\nParameters:\n1. loan_amount (type: number) - The loan amount.\n2. interest_rate (type: number) - The interest rate.\n3. loan_term (type: integer) - The loan term in years.\nRequired: [loan_amount, interest_rate, loan_term]\n\nFormat your response as a single string using keyword arguments.",
        "output": "finance.calculate_personal_loan_payment(loan_amount=10000, interest_rate=0.08, loan_term=2)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the average stock price of Apple for the past month.\n\nFunction to be used: stock.average_price\nDescription: Calculate the average price of a stock for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. start_date (type: string) - Start date of the time period (YYYY-MM-DD).\n3. end_date (type: string) - End date of the time period (YYYY-MM-DD).\nRequired: [symbol, start_date, end_date]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.average_price(symbol=\"AAPL\", start_date=\"2022-01-01\", end_date=\"2022-01-31\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Simulate a random walk of a stock price for the next 10 days.\n\nFunction to be used: stock.simulate_walk\nDescription: Generate a random walk of a stock price for a specified number of days.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. days (type: integer) - Number of days for the simulation.\nRequired: [symbol, days]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.simulate_walk(symbol=\"AAPL\", days=10)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the correlation between the stock prices of Apple and Microsoft for the past year.\n\nFunction to be used: stock.correlation\nDescription: Calculate the correlation between two stock prices for a specified time period.\nParameters:\n1. symbol1 (type: string) - Stock symbol for the first company.\n2. symbol2 (type: string) - Stock symbol for the second company.\n3. start_date (type: string) - Start date of the time period (YYYY-MM-DD).\n4. end_date (type: string) - End date of the time period (YYYY-MM-DD).\nRequired: [symbol1, symbol2, start_date, end_date]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.correlation(symbol1=\"AAPL\", symbol2=\"MSFT\", start_date=\"2021-01-01\", end_date=\"2021-12-31\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the average daily trading volume of a stock for the past month.\n\nFunction to be used: trading.average_volume\nDescription: Calculate the average daily trading volume of a stock for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. start_date (type: string) - Start date of the time period (YYYY-MM-DD).\n3. end_date (type: string) - End date of the time period (YYYY-MM-DD).\nRequired: [symbol, start_date, end_date]\n\nFormat your response as a single string using keyword arguments.",
        "output": "trading.average_volume(symbol=\"AAPL\", start_date=\"2022-01-01\", end_date=\"2022-01-31\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the moving average of a stock price for the past 30 days.\n\nFunction to be used: stock.moving_average\nDescription: Calculate the moving average of a stock price for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. days (type: integer) - Number of days for the moving average calculation.\nRequired: [symbol, days]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.moving_average(symbol=\"AAPL\", days=30)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the standard deviation of a stock price for the past 90 days.\n\nFunction to be used: stock.standard_deviation\nDescription: Calculate the standard deviation of a stock price for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. days (type: integer) - Number of days for the standard deviation calculation.\nRequired: [symbol, days]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.standard_deviation(symbol=\"AAPL\", days=90)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the exponential moving average of a stock price for the past 50 days.\n\nFunction to be used: stock.exponential_moving_average\nDescription: Calculate the exponential moving average of a stock price for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. days (type: integer) - Number of days for the exponential moving average calculation.\nRequired: [symbol, days]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.exponential_moving_average(symbol=\"AAPL\", days=50)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the relative strength index (RSI) of a stock for the past 14 days.\n\nFunction to be used: stock.relative_strength_index\nDescription: Calculate the relative strength index (RSI) of a stock for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. days (type: integer) - Number of days for the RSI calculation.\nRequired: [symbol, days]\n\nFormat your response as a single string using keyword arguments.",
        "output": "stock.relative_strength_index(symbol=\"AAPL\", days=14)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the average trading volume of a stock for the past 6 months.\n\nFunction to be used: trading.average_volume\nDescription: Calculate the average trading volume of a stock for a specified time period.\nParameters:\n1. symbol (type: string) - Stock symbol, e.g., AAPL for Apple.\n2. start_date (type: string) - Start date of the time period (YYYY-MM-DD).\n3. end_date (type: string) - End date of the time period (YYYY-MM-DD).\nRequired: [symbol, start_date, end_date]\n\nFormat your response as a single string using keyword arguments.",
        "output": "trading.average_volume(symbol=\"AAPL\", start_date=\"2021-07-01\", end_date=\"2021-12-31\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the square root of a given number.\n\nFunction to be used: math.sqrt\nDescription: Calculate the square root of a given number.\nParameters:\n1. number (type: number) - The number for which square root needs to be calculated.\nRequired: [number]\n\nFormat your response as a single string using keyword arguments.",
        "output": "math.sqrt(number=16)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Convert a temperature from Celsius to Fahrenheit.\n\nFunction to be used: temperature.celsius_to_fahrenheit\nDescription: Convert a temperature from Celsius to Fahrenheit.\nParameters:\n1. celsius (type: number) - The temperature in Celsius.\nRequired: [celsius]\n\nFormat your response as a single string using keyword arguments.",
        "output": "temperature.celsius_to_fahrenheit(celsius=25)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the factorial of a given number.\n\nFunction to be used: math.factorial\nDescription: Calculate the factorial of a given number.\nParameters:\n1. number (type: integer) - The number for which factorial needs to be calculated.\nRequired: [number]\n\nFormat your response as a single string using keyword arguments.",
        "output": "math.factorial(number=5)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Generate a random number between a given range.\n\nFunction to be used: random.randint\nDescription: Generate a random number between a given range.\nParameters:\n1. min (type: integer) - The minimum value of the range.\n2. max (type: integer) - The maximum value of the range.\nRequired: [min, max]\n\nFormat your response as a single string using keyword arguments.",
        "output": "random.randint(min=1, max=10)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the exponential value of a given number.\n\nFunction to be used: math.exp\nDescription: Calculate the exponential value of a given number.\nParameters:\n1. number (type: number) - The number for which exponential value needs to be calculated.\nRequired: [number]\n\nFormat your response as a single string using keyword arguments.",
        "output": "math.exp(number=2)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the sine value of a given angle in radians.\n\nFunction to be used: math.sin\nDescription: Calculate the sine value of a given angle in radians.\nParameters:\n1. angle (type: number) - The angle in radians.\nRequired: [angle]\n\nFormat your response as a single string using keyword arguments.",
        "output": "math.sin(angle=0.5)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the sum of two given numbers.\n\nFunction to be used: math.add\nDescription: Calculate the sum of two given numbers.\nParameters:\n1. num1 (type: number) - The first number.\n2. num2 (type: number) - The second number.\nRequired: [num1, num2]\n\nFormat your response as a single string using keyword arguments.",
        "output": "math.add(num1=5, num2=3)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the logarithm of a given number.\n\nFunction to be used: math.log\nDescription: Calculate the logarithm of a given number.\nParameters:\n1. number (type: number) - The number for which logarithm needs to be calculated.\n2. base (type: number) - The base of the logarithm. Default is e (natural logarithm).\nRequired: [number]\n\nFormat your response as a single string using keyword arguments.",
        "output": "math.log(number=10, base=2)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the mean of a given set of numbers.\n\nFunction to be used: statistics.mean\nDescription: Calculate the mean of a given set of numbers.\nParameters:\n1. numbers (type: array) - The set of numbers.\nRequired: [numbers]\n\nFormat your response as a single string using keyword arguments.",
        "output": "statistics.mean(numbers=[2, 4, 6, 8, 10])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the highest scoring player in a multiplayer online game.\n\nFunction to be used: game.get_leaderboard\nDescription: Retrieve the leaderboard for a multiplayer online game.\nParameters:\n1. game_id (type: integer) - ID of the game.\n2. sort_by (type: string) - Parameter to sort the leaderboard by.\n3. limit (type: integer) - Number of top players to retrieve.\nRequired: [game_id, sort_by, limit]\n\nFormat your response as a single string using keyword arguments.",
        "output": "game.get_leaderboard(game_id=123, sort_by='score', limit=1)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Retrieve the list of available weapons in a role-playing game.\n\nFunction to be used: game.get_weapons\nDescription: Get a list of weapons available in a role-playing game.\nParameters:\n1. game_id (type: integer) - ID of the game.\n2. type (type: string) - Type of weapons to retrieve.\n3. rarity (type: string) - Rarity of weapons to retrieve.\nRequired: [game_id, type, rarity]\n\nFormat your response as a single string using keyword arguments.",
        "output": "game.get_weapons(game_id=456, type='sword', rarity='legendary')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Retrieve the list of available maps in a first-person shooter game.\n\nFunction to be used: game.get_maps\nDescription: Get a list of maps available in a first-person shooter game.\nParameters:\n1. game_id (type: integer) - ID of the game.\n2. game_mode (type: string) - Game mode to filter the maps by.\n3. player_count (type: integer) - Number of players supported by the maps.\nRequired: [game_id, game_mode, player_count]\n\nFormat your response as a single string using keyword arguments.",
        "output": "game.get_maps(game_id=789, game_mode='team_deathmatch', player_count=10)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Retrieve the list of available quests in a fantasy RPG game.\n\nFunction to be used: game.get_quests\nDescription: Get a list of quests available in a fantasy RPG game.\nParameters:\n1. game_id (type: integer) - ID of the game.\n2. difficulty (type: string) - Difficulty level of the quests.\n3. reward_type (type: string) - Type of reward offered by the quests.\nRequired: [game_id, difficulty, reward_type]\n\nFormat your response as a single string using keyword arguments.",
        "output": "game.get_quests(game_id=987, difficulty='medium', reward_type='gold')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Retrieve the list of available characters in a fighting game.\n\nFunction to be used: game.get_characters\nDescription: Get a list of characters available in a fighting game.\nParameters:\n1. game_id (type: integer) - ID of the game.\n2. combat_style (type: string) - Combat style of the characters.\n3. tier (type: string) - Tier ranking of the characters.\nRequired: [game_id, combat_style, tier]\n\nFormat your response as a single string using keyword arguments.",
        "output": "game.get_characters(game_id=654, combat_style='melee', tier='A')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Schedule a meeting with John and Jane for tomorrow at 2 PM.\n\nFunction to be used: meeting.schedule\nDescription: Schedule a meeting with specified participants at a given time.\nParameters:\n1. participants (type: array)\n2. date (type: string) - Preferred meeting date (e.g., YYYY-MM-DD).\n3. time (type: string) - Preferred meeting time (e.g., HH:MM AM/PM).\nRequired: [participants, date, time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "meeting.schedule(participants=['John', 'Jane'], date='2023-10-24', time='2:00 PM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Reschedule the team meeting to next week on Wednesday at 10 AM.\n\nFunction to be used: meeting.reschedule\nDescription: Reschedule a meeting to a new date and time.\nParameters:\n1. meeting_id (type: string) - Unique identifier of the meeting.\n2. new_date (type: string) - New meeting date (e.g., YYYY-MM-DD).\n3. new_time (type: string) - New meeting time (e.g., HH:MM AM/PM).\nRequired: [meeting_id, new_date, new_time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "meeting.reschedule(meeting_id='12345', new_date='2023-10-25', new_time='10:00 AM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a meeting room available for tomorrow's presentation from 1 PM to 3 PM.\n\nFunction to be used: meeting_room.find_available\nDescription: Find an available meeting room for a specified time slot.\nParameters:\n1. date (type: string) - Preferred meeting date (e.g., YYYY-MM-DD).\n2. start_time (type: string) - Preferred start time of the meeting (e.g., HH:MM AM/PM).\n3. end_time (type: string) - Preferred end time of the meeting (e.g., HH:MM AM/PM).\nRequired: [date, start_time, end_time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "meeting_room.find_available(date='2023-10-24', start_time='1:00 PM', end_time='3:00 PM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Invite all team members to a brainstorming session next Monday at 9 AM.\n\nFunction to be used: meeting.invite\nDescription: Invite participants to a meeting at a specified time.\nParameters:\n1. participants (type: array)\n2. date (type: string) - Meeting date (e.g., YYYY-MM-DD).\n3. time (type: string) - Meeting time (e.g., HH:MM AM/PM).\nRequired: [participants, date, time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "meeting.invite(participants=['John', 'Jane', 'Mike', 'Sarah'], date='2023-10-30', time='9:00 AM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Check the availability of the conference room for next Friday's board meeting at 2 PM.\n\nFunction to be used: conference_room.check_availability\nDescription: Check the availability of a conference room for a specified meeting.\nParameters:\n1. meeting_type (type: string) - Type or purpose of the meeting.\n2. date (type: string) - Meeting date (e.g., YYYY-MM-DD).\n3. time (type: string) - Meeting time (e.g., HH:MM AM/PM).\nRequired: [meeting_type, date, time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "conference_room.check_availability(meeting_type='Board Meeting', date='2023-10-27', time='2:00 PM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Schedule a video conference call with the remote team members on Thursday at 11 AM.\n\nFunction to be used: video_conference.schedule\nDescription: Schedule a video conference call at a specified time.\nParameters:\n1. participants (type: array)\n2. date (type: string) - Preferred video conference date (e.g., YYYY-MM-DD).\n3. time (type: string) - Preferred video conference time (e.g., HH:MM AM/PM).\nRequired: [participants, date, time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "video_conference.schedule(participants=['John', 'Jane', 'Mike', 'Sarah'], date='2023-10-26', time='11:00 AM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Reschedule the client meeting to next month on the 5th at 3 PM.\n\nFunction to be used: client_meeting.reschedule\nDescription: Reschedule a client meeting to a new date and time.\nParameters:\n1. meeting_id (type: string) - Unique identifier of the client meeting.\n2. new_date (type: string) - New meeting date (e.g., YYYY-MM-DD).\n3. new_time (type: string) - New meeting time (e.g., HH:MM AM/PM).\nRequired: [meeting_id, new_date, new_time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "client_meeting.reschedule(meeting_id='67890', new_date='2023-11-05', new_time='3:00 PM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find an available meeting slot for a team discussion on the project next week.\n\nFunction to be used: meeting_slot.find_available\nDescription: Find an available meeting slot for a team discussion on a specific project.\nParameters:\n1. project (type: string) - Name or ID of the project.\n2. date (type: string) - Preferred meeting date (e.g., YYYY-MM-DD).\nRequired: [project, date]\n\nFormat your response as a single string using keyword arguments.",
        "output": "meeting_slot.find_available(project='Project X', date='2023-10-31')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Schedule a lunch meeting with the marketing team members on Friday at 12:30 PM.\n\nFunction to be used: lunch_meeting.schedule\nDescription: Schedule a lunch meeting with specified team members at a given time.\nParameters:\n1. team_members (type: array)\n2. date (type: string) - Preferred lunch meeting date (e.g., YYYY-MM-DD).\n3. time (type: string) - Preferred lunch meeting time (e.g., HH:MM AM/PM).\nRequired: [team_members, date, time]\n\nFormat your response as a single string using keyword arguments.",
        "output": "lunch_meeting.schedule(team_members=['John', 'Jane', 'Mike', 'Sarah'], date='2023-10-27', time='12:30 PM')"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a guided tour in Rome, Italy for a group of 10 people.\n\nFunction to be used: tour.book\nDescription: Book a guided tour for a specified number of participants and destination.\nParameters:\n1. destination (type: string) - The city or location of the tour.\n2. group_size (type: integer) - Number of participants in the group.\n3. date (type: string) - Preferred tour date (e.g., YYYY-MM-DD).\nRequired: [destination, group_size]\n\nFormat your response as a single string using keyword arguments.",
        "output": "tour.book(destination=\"Rome, Italy\", group_size=10)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the best hiking trails near Vancouver, Canada with scenic views.\n\nFunction to be used: hiking_trail.find_nearby\nDescription: Locate nearby hiking trails based on specific criteria like scenic views.\nParameters:\n1. location (type: string) - The city and country, e.g. Vancouver, Canada\n2. criteria (type: array) - Preferred criteria for hiking trails.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "hiking_trail.find_nearby(location=\"Vancouver, Canada\", criteria=[\"Scenic Views\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a museum in Paris, France with a guided tour available in English.\n\nFunction to be used: museum.find_nearby\nDescription: Locate nearby museums based on specific criteria like guided tours in English.\nParameters:\n1. location (type: string) - The city and country, e.g. Paris, France\n2. criteria (type: array) - Preferred criteria for museums.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "museum.find_nearby(location=\"Paris, France\", criteria=[\"Guided Tours\", \"English Language\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find a beach resort in Cancun, Mexico with all-inclusive amenities.\n\nFunction to be used: resort.find_nearby\nDescription: Locate nearby beach resorts based on specific amenities like all-inclusive packages.\nParameters:\n1. location (type: string) - The city and country, e.g. Cancun, Mexico\n2. amenities (type: array) - Preferred amenities for beach resorts.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "resort.find_nearby(location=\"Cancun, Mexico\", amenities=[\"All-Inclusive\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the summary of a book by its ISBN number.\n\nFunction to be used: book.get_summary\nDescription: Retrieve the summary of a book based on its ISBN number.\nParameters:\n1. isbn (type: string) - ISBN number of the book.\nRequired: [isbn]\n\nFormat your response as a single string using keyword arguments.",
        "output": "book.get_summary(isbn=\"978-3-16-148410-0\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get a list of classic novels written by Jane Austen.\n\nFunction to be used: novels.get_classics\nDescription: Retrieve a list of classic novels written by a specific author.\nParameters:\n1. author (type: string) - Name of the author.\nRequired: [author]\n\nFormat your response as a single string using keyword arguments.",
        "output": "novels.get_classics(author=\"Jane Austen\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for poems written in the Romantic era.\n\nFunction to be used: poems.search\nDescription: Search for poems based on a specific era or time period.\nParameters:\n1. era (type: string) - Era or time period of the poems.\nRequired: [era]\n\nFormat your response as a single string using keyword arguments.",
        "output": "poems.search(era=\"Romantic\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the list of Pulitzer Prize-winning novels from the past decade.\n\nFunction to be used: novels.get_pulitzer_winners\nDescription: Retrieve a list of novels that have won the Pulitzer Prize within a specific time frame.\nParameters:\n1. start_year (type: integer) - Start year of the time frame.\n2. end_year (type: integer) - End year of the time frame.\nRequired: [start_year, end_year]\n\nFormat your response as a single string using keyword arguments.",
        "output": "novels.get_pulitzer_winners(start_year=2011, end_year=2021)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the author of a specific poem.\n\nFunction to be used: poem.get_author\nDescription: Retrieve the author of a specific poem.\nParameters:\n1. title (type: string) - Title of the poem.\nRequired: [title]\n\nFormat your response as a single string using keyword arguments.",
        "output": "poem.get_author(title=\"The Raven\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for plays written by William Shakespeare.\n\nFunction to be used: plays.search\nDescription: Search for plays written by a specific playwright.\nParameters:\n1. playwright (type: string) - Name of the playwright.\nRequired: [playwright]\n\nFormat your response as a single string using keyword arguments.",
        "output": "plays.search(playwright=\"William Shakespeare\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the list of New York Times best-selling non-fiction books.\n\nFunction to be used: books.get_best_sellers\nDescription: Retrieve the list of best-selling non-fiction books.\nParameters:\n1. genre (type: string) - Genre of the books.\nRequired: [genre]\n\nFormat your response as a single string using keyword arguments.",
        "output": "books.get_best_sellers(genre=\"Non-Fiction\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the publication year of a specific novel.\n\nFunction to be used: novel.get_publication_year\nDescription: Retrieve the publication year of a specific novel.\nParameters:\n1. title (type: string) - Title of the novel.\nRequired: [title]\n\nFormat your response as a single string using keyword arguments.",
        "output": "novel.get_publication_year(title=\"To Kill a Mockingbird\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Search for literary magazines that accept poetry submissions.\n\nFunction to be used: magazines.search\nDescription: Search for literary magazines that accept submissions in a specific genre.\nParameters:\n1. genre (type: string) - Genre of the submissions.\nRequired: [genre]\n\nFormat your response as a single string using keyword arguments.",
        "output": "magazines.search(genre=\"Poetry\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Get the list of Nobel Prize-winning authors in Literature.\n\nFunction to be used: authors.get_nobel_winners\nDescription: Retrieve the list of authors who have won the Nobel Prize in Literature.\nParameters:\nNo parameters\n\nFormat your response as a single string using keyword arguments.",
        "output": "authors.get_nobel_winners()"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the population of Tokyo, Japan.\n\nFunction to be used: population.find\nDescription: Retrieve the population of a specific city or region.\nParameters:\n1. location (type: string) - City or region to find the population of.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "population.find(location=\"Tokyo, Japan\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the distance between London, UK and Paris, France.\n\nFunction to be used: distance.calculate\nDescription: Calculate the distance between two locations.\nParameters:\n1. origin (type: string) - Starting location.\n2. destination (type: string) - Destination location.\nRequired: [origin, destination]\n\nFormat your response as a single string using keyword arguments.",
        "output": "distance.calculate(origin=\"London, UK\", destination=\"Paris, France\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the highest mountain in the world.\n\nFunction to be used: mountain.find_highest\nDescription: Find the highest mountain in the world.\nParameters:\n\nFormat your response as a single string using keyword arguments.",
        "output": "mountain.find_highest()"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the capital city of Australia.\n\nFunction to be used: capital.find\nDescription: Find the capital city of a specific country.\nParameters:\n1. country (type: string) - Name of the country.\nRequired: [country]\n\nFormat your response as a single string using keyword arguments.",
        "output": "capital.find(country=\"Australia\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the time zone of New York City.\n\nFunction to be used: timezone.find\nDescription: Find the time zone of a specific location.\nParameters:\n1. location (type: string) - City or region to find the time zone of.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "timezone.find(location=\"New York City\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the area of the Great Barrier Reef.\n\nFunction to be used: area.calculate\nDescription: Calculate the area of a specific region or landmark.\nParameters:\n1. location (type: string) - City or region to calculate the area of.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "area.calculate(location=\"Great Barrier Reef\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the average temperature of Antarctica.\n\nFunction to be used: temperature.find_average\nDescription: Find the average temperature of a specific location.\nParameters:\n1. location (type: string) - City or region to find the average temperature of.\nRequired: [location]\n\nFormat your response as a single string using keyword arguments.",
        "output": "temperature.find_average(location=\"Antarctica\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the currency used in Brazil.\n\nFunction to be used: currency.find\nDescription: Find the currency used in a specific country.\nParameters:\n1. country (type: string) - Name of the country.\nRequired: [country]\n\nFormat your response as a single string using keyword arguments.",
        "output": "currency.find(country=\"Brazil\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the highest waterfall in the world.\n\nFunction to be used: waterfall.find_highest\nDescription: Find the highest waterfall in the world.\nParameters:\n\nFormat your response as a single string using keyword arguments.",
        "output": "waterfall.find_highest()"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the official language of China.\n\nFunction to be used: language.find_official\nDescription: Find the official language of a specific country.\nParameters:\n1. country (type: string) - Name of the country.\nRequired: [country]\n\nFormat your response as a single string using keyword arguments.",
        "output": "language.find_official(country=\"China\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Find the scientific name of a rose.\n\nFunction to be used: plant.get_scientific_name\nDescription: Retrieve the scientific name of a plant based on its common name.\nParameters:\n1. common_name (type: string) - The common name of the plant.\nRequired: [common_name]\n\nFormat your response as a single string using keyword arguments.",
        "output": "plant.get_scientific_name(common_name=\"rose\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the body mass index (BMI) given weight and height.\n\nFunction to be used: bmi.calculate\nDescription: Calculate the body mass index (BMI) using weight and height measurements.\nParameters:\n1. weight (type: number) - Weight in kilograms.\n2. height (type: number) - Height in meters.\nRequired: [weight, height]\n\nFormat your response as a single string using keyword arguments.",
        "output": "bmi.calculate(weight=70, height=1.75)"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Identify the dominant eye color in a given population.\n\nFunction to be used: population.analyze_eye_color\nDescription: Analyze the distribution of eye colors in a population and identify the dominant eye color.\nParameters:\n1. population (type: array) - Eye colors of individuals in the population.\nRequired: [population]\n\nFormat your response as a single string using keyword arguments.",
        "output": "population.analyze_eye_color(population=[\"Blue\", \"Brown\", \"Brown\", \"Green\", \"Green\", \"Hazel\", \"Hazel\", \"Hazel\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Retrieve the DNA sequence of a specific gene.\n\nFunction to be used: gene.get_sequence\nDescription: Retrieve the DNA sequence of a specific gene based on its identifier.\nParameters:\n1. gene_id (type: string) - Identifier of the gene.\nRequired: [gene_id]\n\nFormat your response as a single string using keyword arguments.",
        "output": "gene.get_sequence(gene_id=\"ABC123\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the probability of inheriting a specific trait based on parental genotypes.\n\nFunction to be used: genetics.calculate_inheritance_probability\nDescription: Calculate the probability of inheriting a specific trait based on the genotypes of the parents.\nParameters:\n1. parent1_genotype (type: string) - Genotype of parent 1.\n2. parent2_genotype (type: string) - Genotype of parent 2.\n3. trait (type: string) - Trait of interest.\nRequired: [parent1_genotype, parent2_genotype, trait]\n\nFormat your response as a single string using keyword arguments.",
        "output": "genetics.calculate_inheritance_probability(parent1_genotype=\"AA\", parent2_genotype=\"Aa\", trait=\"Tall\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Identify the species of a given bird based on its characteristics.\n\nFunction to be used: bird.identify_species\nDescription: Identify the species of a bird based on its physical characteristics and behaviors.\nParameters:\n1. characteristics (type: array)\n2. behaviors (type: array)\nRequired: [characteristics, behaviors]\n\nFormat your response as a single string using keyword arguments.",
        "output": "bird.identify_species(characteristics=[\"Red head\", \"Long beak\"], behaviors=[\"Nesting in trees\", \"Migratory\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the energy required to break a chemical bond.\n\nFunction to be used: chemistry.calculate_bond_energy\nDescription: Calculate the energy required to break a chemical bond based on the bond type and atoms involved.\nParameters:\n1. bond_type (type: string) - Type of chemical bond.\n2. atoms (type: array)\nRequired: [bond_type, atoms]\n\nFormat your response as a single string using keyword arguments.",
        "output": "chemistry.calculate_bond_energy(bond_type=\"Covalent\", atoms=[\"H\", \"O\"])"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Retrieve the amino acid sequence of a protein.\n\nFunction to be used: protein.get_sequence\nDescription: Retrieve the amino acid sequence of a protein based on its identifier.\nParameters:\n1. protein_id (type: string) - Identifier of the protein.\nRequired: [protein_id]\n\nFormat your response as a single string using keyword arguments.",
        "output": "protein.get_sequence(protein_id=\"P12345\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Calculate the population growth rate over a certain time period.\n\nFunction to be used: population.calculate_growth_rate\nDescription: Calculate the population growth rate based on initial and final population sizes and the time period.\nParameters:\n1. initial_population (type: integer) - Initial population size.\n2. final_population (type: integer) - Final population size.\n3. time_period (type: string) - Time period of population growth.\nRequired: [initial_population, final_population, time_period]\n\nFormat your response as a single string using keyword arguments.",
        "output": "population.calculate_growth_rate(initial_population=1000, final_population=1500, time_period=\"10 years\")"
    },
    {
        "instruction": "Construct a function call to answer the given question using keyword arguments based on the provided specifications:\n\nQuestion: Identify the taxonomic classification of a given organism.\n\nFunction to be used: taxonomy.identify_classification\nDescription: Identify the taxonomic classification (kingdom, phylum, class, etc.) of a given organism.\nParameters:\n1. organism_name (type: string) - Name of the organism.\nRequired: [organism_name]\n\nFormat your response as a single string using keyword arguments.",
        "output": "taxonomy.identify_classification(organism_name=\"Homo sapiens\")"
    }
]